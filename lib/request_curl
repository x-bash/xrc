# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263

# author:       Li Junhao           l@x-cmd.com
# maintainer:   Li Junhao
# license:      GPLv3
___x_cmd_http_not_secure_request_nc(){
    printf "GET %s HTTP/1.1\r\nHost: %s\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\nConnection: close\r\n\r\n" "$path" "$host" | nc "$host" 80
}

___x_cmd_http_not_secure_request_bash()(
    host="$host" path="$path" bash -c '
        exec 88<>"/dev/tcp/$host/80"
        printf "GET %s HTTP/1.1\r\nHost: %s\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\nConnection: close\r\n\r\n" "$path" "$host" >&88
        cat <&88
        exec 88>&- >&2
        exec 88<&- >&2
    '
)

___X_CMD_HTTP_NOT_SECURE_REQUEST_HANDLER_R="$(printf "\r")"

___x_cmd_http_not_secure_request_handler(){
    local file="${1:?Provide cache filepath}"
    local line
    while read -r line; do
        line="${line%"${___X_CMD_HTTP_NOT_SECURE_REQUEST_HANDLER_R}"}"
        printf "%s\n" "$line"

        if [ "$line" = "" ]; then
            break
        fi
    done
    cat >"$file"
}

# Test: ___x_cmd_http_not_secure_get gitee.com/ a.txt
___x_cmd_http_not_secure_get(){
    local path="${1:?Provide path}"
    local file="${2:?Provide cache file}"

    path="${path#http*://}"
    host="${path%%/*}"
    local origin_path="$path"
    path="${path#*/}"
    if [ "$path" = "$origin_path" ]; then
        path=""
    fi
    path="/$path"

    if command -v bash 1>/dev/null; then
        ___x_cmd_http_not_secure_request(){
            ___x_cmd_http_not_secure_request_bash
        }
    elif command -v wget >/dev/null; then
        ___x_cmd_http_not_secure_request(){
            wget "http://${host}${path}" -O -
        }
    elif command -v nc 1>/dev/null; then
        ___x_cmd_http_not_secure_request(){
           ___x_cmd_http_not_secure_request_nc
        }
    else
        printf "Not support without wget, bash or nc." >&2
        return 1
    fi

    local code=0
    ___x_cmd_http_not_secure_request | ___x_cmd_http_not_secure_request_handler "$file"| ___x_cmd_httpget_handle_resp_header "$file" "$code"
}

___x_cmd_http_download_curl(){
    xrc os
    local arch
    arch="$(os arch)"
    # if [ "$(os name)" != "linux" ];then
    #     return 1
    # fi
    local url="${1:-"static-build.gitee.io/curl/bin"}"
    local app="${2:-"curl.linux.$arch"}"
    local target="$HOME/.x-cmd/.bin/${app%%.}"
    local sha="2e8196fae25ab2f2a5c0b117432ffb829be0ac785760ad7a35c58c1ab6d3ec65"
    echo "http://$url/$app.7z">a
    ___x_cmd_http_not_secure_get "http://$url/$app.7z" "$target/$app.7z" 2>/dev/stdout || return 1

    local size
    size=$(wc -c "$target/$app.7z")
    size=${size% *}
    size=$(printf "%s" "$size")   # Notice: Intentionary let it unquoted.
    if [ "$size" -lt 20 ]; then
        size="$(cat "$app.7z")"
            local i
            local suffix
        for i in $(seq "$size"); do
            suffix="$(printf "%3s" "$i" | tr " " 0)"
            ___x_cmd_http_not_secure_get "http://$url/$app.7z.$suffix" "$target/$app.7z.$suffix" 2>/dev/stdout || return 1
        done && cat "$target"/"$app".7z.0* > "$app".7z
    fi

    if command -v 7zr 1>/dev/null 2>&1; then
        7zr x "$target"/"$app".7z
        else
        ## TODO:giteePages
        ___x_cmd_http_not_secure_get "http://gitee.com/static-build/p7zip/raw/main/bin/7zd.linux.$arch" "$HOME/.x-cmd/.bin/7zd/7zd.linux.$arch"
        "$HOME/.x-cmd/.bin/7zd/7zd.linux.$arch" x "$target"/"$app".7z
    fi
    [ "$sha" != "$(sha256sum "$target"/"$app")" ] && return 1
    # ___x_cmd_httpget
    # ___x_cmd_curl

}
